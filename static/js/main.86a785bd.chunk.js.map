{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Todo","props","completeTodo","deleteTodo","todo","className","style","textDecoration","isComplete","text","onClick","TodoForm","useState","value","setValue","onSubmit","e","preventDefault","addTodo","type","onChange","target","App","todos","setTodos","todoItems","map","index","key","newTodos","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAiBMA,G,MAAO,SAACC,GAAsB,IAC3BC,EAAkCD,EAAlCC,aAAcC,EAAoBF,EAApBE,WAAYC,EAAQH,EAARG,KAEjC,OAAO,yBACLC,UAAU,QAEV,yBAAKC,MAAO,CAAEC,eAAgBH,EAAKI,WAAa,eAAiB,KAC9DJ,EAAKK,MAER,4BACEC,QAASR,GADX,YAKA,4BACEQ,QAASP,GADX,QASEQ,EAA2D,SAACV,GAAW,IAAD,EAEhDW,mBAAS,IAFuC,mBAEnEC,EAFmE,KAE5DC,EAF4D,KAW1E,OACE,0BAAMC,SARa,SAACC,GACpBA,EAAEC,iBACGJ,IACLZ,EAAMiB,QAAQL,GACdC,EAAS,OAKP,2BAAOK,KAAK,OACVd,UAAU,QACVQ,MAAOA,EACPO,SAAU,SAAAJ,GAAC,OAAIF,EAASE,EAAEK,OAAOR,YAmE1BS,EA7DO,WAAM,MAGAV,mBAAS,CACjC,CAAEH,KAAM,MAAOD,YAAY,GAC3B,CAAEC,KAAM,KAAMD,YAAY,GAC1B,CAAEC,KAAM,UAAWD,YAAY,KANP,mBAGnBe,EAHmB,KAGZC,EAHY,KAuCpBC,EAAYF,EAAMG,KAAI,SAACtB,EAAMuB,GACjC,OAAO,kBAAC,EAAD,CACLC,IAAKD,EACLvB,KAAMA,EACNF,aAAc,kBA1BG,SAACyB,GACpB,IAAME,EAAQ,YAAON,IAEc,IAA/BM,EAASF,GAAOnB,WAClBqB,EAASF,GAAOnB,YAAa,EAE7BqB,EAASF,GAAOnB,YAAa,EAI/BgB,EAASK,GAgBa3B,CAAayB,IACjCxB,WAAY,kBAbG,SAACwB,GAClB,IAAME,EAAQ,YAAON,GACrBM,EAASC,OAAOH,EAAO,GACvBH,EAASK,GAUW1B,CAAWwB,SAIjC,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,aACZoB,EADH,IAEE,kBAAC,EAAD,CACEP,QA3CQ,SAACT,GACf,IAAMoB,EAAQ,sBAAON,GAAP,CAAc,CAAEd,OAAMD,YAAY,KAChDgB,EAASK,SC9DOE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.86a785bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\ninterface TodoProps {\r\n  todo: {\r\n    text: string\r\n    isComplete: boolean\r\n  }\r\n  completeTodo: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n  deleteTodo: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\r\n  key: number\r\n} //i have no idea what the fuck i'm doing with this interface lmao\r\n\r\n// ok so interfaces simply describe the types for a given object or return value\r\n\r\n\r\n\r\nconst Todo = (props: TodoProps) => {\r\n  const {completeTodo, deleteTodo, todo} = props\r\n\r\n  return <div\r\n    className=\"todo\"\r\n  >\r\n    <div style={{ textDecoration: todo.isComplete ? 'line-through' : '' }}>\r\n      {todo.text}\r\n    </div>\r\n    <button\r\n      onClick={completeTodo}\r\n    >\r\n      complete\r\n      </button>\r\n    <button\r\n      onClick={deleteTodo}\r\n    >\r\n      X\r\n      </button>\r\n  </div>\r\n}\r\n\r\n\r\nconst TodoForm: React.FC<{ addTodo: (text: string) => void; }> = (props) => {\r\n\r\n  const [value, setValue] = useState('')\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    if (!value) return;\r\n    props.addTodo(value)\r\n    setValue('')\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\"\r\n        className=\"input\"\r\n        value={value}\r\n        onChange={e => setValue(e.target.value)}\r\n      />\r\n    </form>\r\n  )\r\n}\r\n\r\nconst App: React.FC = () => {\r\n\r\n  // similar to this.state inside of a constructor\r\n  const [todos, setTodos] = useState([\r\n    { text: 'sup', isComplete: false },\r\n    { text: 'hi', isComplete: false },\r\n    { text: 'whatsup', isComplete: false }\r\n  ])\r\n\r\n  // similar to methods on the class\r\n  const addTodo = (text: string) => {\r\n    const newTodos = [...todos, { text, isComplete: false }]\r\n    setTodos(newTodos)\r\n    // similar to setState but specifically based on the first useState hook\r\n  }\r\n\r\n  // another 'class' method we pass via props\r\n  const completeTodo = (index: number) => {\r\n    const newTodos = [...todos]\r\n    // copy current state of todos\r\n    if (newTodos[index].isComplete === false) {\r\n      newTodos[index].isComplete = true\r\n    } else {\r\n      newTodos[index].isComplete = false\r\n    }\r\n    \r\n    // set selected todo to complete in state\r\n    setTodos(newTodos)\r\n    // call 'setState' with new todo list\r\n  }\r\n\r\n  const deleteTodo = (index: number) => {\r\n    const newTodos = [...todos]\r\n    newTodos.splice(index, 1)\r\n    setTodos(newTodos)\r\n  }\r\n  // similar to how you can do this inside of a render() before the return...\r\n  // if you did this inside of the return in a functional component\r\n  // you would need to wrap the function in {}\r\n  const todoItems = todos.map((todo, index) => {\r\n    return <Todo\r\n      key={index}\r\n      todo={todo}\r\n      completeTodo={() => completeTodo(index)}\r\n      deleteTodo={() => deleteTodo(index)}\r\n    />\r\n  })\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"todo-list\">\r\n        {todoItems} {/**normal shit */}\r\n        <TodoForm\r\n          addTodo={addTodo}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}